using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
//using Microsoft.Xna.Framework.Math;
using Terraria;
using Terraria.Audio;
using Terraria.GameContent;
using Terraria.ID;
using Terraria.ModLoader;
using System;

namespace P1test.Projectiles
{ 
	public class AirBurstP : ModProjectile
	{


		public override void SetStaticDefaults() {
			DisplayName.SetDefault("Airburst Bullet");     //The English name of the projectile
			ProjectileID.Sets.TrailCacheLength[Projectile.type] = 5;    //The length of old position to be recorded
			ProjectileID.Sets.TrailingMode[Projectile.type] = 0;        //The recording mode
		}

		public override void SetDefaults() {
			Projectile.width = 8;               //The width of projectile hitbox
			Projectile.height = 6;              //The height of projectile hitbox
			Projectile.aiStyle = 1;             //The ai style of the projectile, please reference the source code of Terraria
			Projectile.friendly = true;         //Can the projectile deal damage to enemies?
			Projectile.hostile = false;         //Can the projectile deal damage to the player?
			Projectile.DamageType = DamageClass.Ranged;           //Is the projectile shoot by a ranged weapon?
			Projectile.penetrate = 2;           //How many monsters the projectile can penetrate. (OnTileCollide below also decrements penetrate for bounces as well)
			Projectile.timeLeft = 600;          //The live time for the projectile (60 = 1 second, so 600 is 10 seconds)
			Projectile.alpha = 255;             //The transparency of the projectile, 255 for completely transparent. (aiStyle 1 quickly fades the projectile in) Make sure to delete this if you aren't using an aiStyle that fades in. You'll wonder why your projectile is invisible.
			Projectile.light = 0.7f;            //How much light emit around the projectile
			Projectile.ignoreWater = true;          //Does the projectile's speed be influenced by water?
			Projectile.tileCollide = true;          //Can the projectile collide with tiles?
			Projectile.extraUpdates = 1;            //Set to above 0 if you want the projectile to update multiple time in a frame
			AIType = ProjectileID.Bullet;           //Act exactly like default Bullet
		}

		public override bool OnTileCollide(Vector2 oldVelocity) {
			//If collide with tile, reduce the penetrate.
			//So the projectile can reflect at most 5 times
			Projectile.penetrate--;
			if (Projectile.penetrate <= 0) {
				Projectile.Kill();
			}
			else {
				Collision.HitTiles(Projectile.position + Projectile.velocity, Projectile.velocity, Projectile.width, Projectile.height);
				SoundEngine.PlaySound(SoundID.Item10, Projectile.position);
				if (Projectile.velocity.X != oldVelocity.X) {
					Projectile.velocity.X = -oldVelocity.X;
				}
				if (Projectile.velocity.Y != oldVelocity.Y) {
					Projectile.velocity.Y = -oldVelocity.Y;
				}
			}
			return false;
		}

		public override bool PreDraw(SpriteBatch spriteBatch, Color lightColor) {
			//Redraw the projectile with the color not influenced by light
			Vector2 drawOrigin = new Vector2(TextureAssets.Projectile[Projectile.type].Value.Width * 0.5f, Projectile.height * 0.5f);
			for (int k = 0; k < Projectile.oldPos.Length; k++) {
				Vector2 drawPos = Projectile.oldPos[k] - Main.screenPosition + drawOrigin + new Vector2(0f, Projectile.gfxOffY);
				Color color = Projectile.GetAlpha(lightColor) * ((float)(Projectile.oldPos.Length - k) / (float)Projectile.oldPos.Length);
				spriteBatch.Draw(TextureAssets.Projectile[Projectile.type].Value, drawPos, null, color, Projectile.rotation, drawOrigin, Projectile.scale, SpriteEffects.None, 0f);
			}
			return true;
		}

		public override void OnHitNPC(NPC target, int damage, float knockback, bool crit)
		{
			/*target.AddBuff(32, 270, false);
			target.AddBuff(36, 270, false);
			target.AddBuff(46, 270, true);
			target.AddBuff(197, 270, true);*/
		}

		


		public override void AI()
        {
			Projectile.localAI[0] += 1f;
			if (Projectile.localAI[0] > 3f)
			{
				Projectile.alpha = 0;
			}
			if (Projectile.ai[0] >= 20f)
			{
				Projectile.ai[0] = 20f;
				Projectile.velocity.Y += 0.075f;
			}
			if (Main.myPlayer == Projectile.owner)
			{
				if (Projectile.ai[1] >= 0f)
				{
					Projectile.penetrate = -1;
				}
				else if (Projectile.penetrate < 0)
				{
					Projectile.penetrate = 1;
				}
				if (Projectile.ai[1] >= 0f)
				{
					Projectile.ai[1] += 1f;
				}
				if (Projectile.ai[1] > (float)Main.rand.Next(35, 200))//(5 + ((int)Main.MouseWorld.Length() / 640 ), 20 + ((int)Main.MouseWorld.Length() / 640)))
				{
					Projectile.ai[1] = -1000f;
					float scaleFactor4 = Projectile.velocity.Length();
					Vector2 velocity = Projectile.velocity;
					velocity.Normalize();
					int num161 = Main.rand.Next(3, 4);//2, 4
					if (Main.rand.Next(4) == 0)
					{
						num161++;
					}
					for (int num162 = 0; num162 < num161; num162++)
					{
						Vector2 vector12 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						vector12.Normalize();
						vector12 += velocity * 2f;
						vector12.Normalize();
						vector12 *= scaleFactor4;
						Projectile.NewProjectile(Projectile.Center.X, Projectile.Center.Y, vector12.X, vector12.Y, Projectile.type, Projectile.damage, Projectile.knockBack, Projectile.owner, 0f, -1000f);
						Dust.NewDust(new Vector2(Projectile.position.X, Projectile.position.Y), Projectile.width, Projectile.height, 6, 0f, 0f, 100, default(Color), 1f);//Extra
					}
				}
			}
		}

		public override void Kill(int timeLeft)
		{
			// This code and the similar code above in OnTileCollide spawn dust from the tiles collided with. SoundID.Item10 is the bounce sound you hear.
			Collision.HitTiles(Projectile.position + Projectile.velocity, Projectile.velocity, Projectile.width, Projectile.height);
			SoundEngine.PlaySound(SoundID.Item10, Projectile.position);
		}
	}
}
